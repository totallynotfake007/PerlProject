#!/opt/ActivePerl-5.24/bin/perl5.24.0
use 5.24.0;
use strict;
use warnings; 
use Net::FTP;
# ftp_gui_build.pl --
#
# UI generated by GUI Builder Build 146 on 2016-09-11 16:13:15 from:
#    /home/harshil/osdl/perl/ftp_gui_build.ui
# This file is auto-generated.  Only the code within
#    '# BEGIN USER CODE'
#    '# END USER CODE'
# and code inside the callback subroutines will be round-tripped.
# The subroutine name 'ui' is reserved.
#

# Declare the package for this dialog
package ftp_gui_build;

# Locate this script so we can load the ui module
use FindBin qw($RealBin); use lib $RealBin; use ftp_gui_build_ui;

# BEGIN USER CODE


my $log_txt = "Welcome Bro, use this software and become a Pro!\n";
my $ftp;
my $host;

# END USER CODE

# BEGIN CALLBACK CODE
# ONLY EDIT CODE WITHIN THE SUB COMMANDS.

# connect_btn_command --
#
# Callback to handle $connect_btn widget option -command
#
# ARGS:
#    <NONE>
#
sub connect_btn_command {
	$log_txt = "Welcome Bro, use this software and become a Pro!\n";
	$host = $ftp_gui_build::host_value->get;
	my $username = $ftp_gui_build::user_value->get;
   	my $password = $ftp_gui_build::pass_value->get;
		
	if($ftp = Net::FTP->new($host, Debug => 0)){
		
		$log_txt = $log_txt . "Connecting to $host...\n";
		$ftp_gui_build::log_text->Contents($log_txt);
		
	    	
	}else{
		$log_txt = $log_txt . "Cannot connect to $host\n";
		$ftp_gui_build::log_text->Contents($log_txt);
		die "Cannot connect to $host\n";
	}
	if($ftp->login($username, $password)){
		$log_txt = $log_txt . "Connected to $host\n";
		$log_txt = $log_txt . "Listing Files and Directories...\n";
		$ftp_gui_build::log_text->Contents($log_txt);
		$ftp->binary or die "Cannot set mode to binary";
		$, = "\n";
		my @files = $ftp->ls;
		my $list = "";
		foreach my $name (@files){
			$list = $list . $name . "\n";
		} 
		$ftp_gui_build::files_list_text->Contents($list);

	}else{
		$log_txt = $log_txt . "Cannot log $username in\n";
		$ftp_gui_build::log_text->Contents($log_txt);
		die "Cannot log $username in\n";
	}

	
}

# cwd_btn_command --
#
# Callback to handle $cwd_btn widget option -command
#
# ARGS:
#    <NONE>
#
sub cwd_btn_command {
	my $dir = $ftp_gui_build::file_value->get;
	if($ftp->cwd($dir)){
		$log_txt = $log_txt . "Changing working directory to $dir\n";
		$log_txt = $log_txt . "Listing Files and Directories...\n";
		$ftp_gui_build::log_text->Contents($log_txt);
		
		my @files = $ftp->ls;
		my $list = "";
		foreach my $name (@files){
			$list = $list . $name . "\n";
		} 
		$ftp_gui_build::files_list_text->Contents($list);
	}
	else{ 
		$log_txt = $log_txt . "Cannot change working directory to $dir\n";
		$ftp_gui_build::log_text->Contents($log_txt);
		die "Cannot change working directory to $dir\n";
	}
	
}

# download_btn_command --
#
# Callback to handle $download_btn widget option -command
#
# ARGS:
#    <NONE>
#
sub download_btn_command {
	my $file = $ftp_gui_build::file_value->get;
	if($ftp->get($file)){
		$log_txt = $log_txt . "Downloading '$file'...\n";
		$ftp_gui_build::log_text->Contents($log_txt);
		my $path = './'.$file;
		while(!-f $path){
			
		}
		$log_txt = $log_txt . "'$file' downloaded...\n";
		$ftp_gui_build::log_text->Contents($log_txt);
	}
	else{
		$log_txt = $log_txt . "Cannot download '$file'...\n";
		$ftp_gui_build::log_text->Contents($log_txt);
		die $ftp->message;
	}
}

# files_list_text_xscrollcommand --
#
# Callback to handle $files_list_text widget option -xscrollcommand
#
# ARGS:
#    <NONE>
#
sub files_list_text_xscrollcommand {}

# files_list_text_yscrollcommand --
#
# Callback to handle $files_list_text widget option -yscrollcommand
#
# ARGS:
#    <NONE>
#
sub files_list_text_yscrollcommand {}

# host_value_invalidcommand --
#
# Callback to handle $host_value widget option -invalidcommand
#
# ARGS:
#    <NONE>
#
sub host_value_invalidcommand {}

# host_value_validatecommand --
#
# Callback to handle $host_value widget option -validatecommand
#
# ARGS:
#    <NONE>
#
sub host_value_validatecommand {}

# host_value_xscrollcommand --
#
# Callback to handle $host_value widget option -xscrollcommand
#
# ARGS:
#    <NONE>
#
sub host_value_xscrollcommand {}

# log_text_xscrollcommand --
#
# Callback to handle $log_text widget option -xscrollcommand
#
# ARGS:
#    <NONE>
#
sub log_text_xscrollcommand {}

# log_text_yscrollcommand --
#
# Callback to handle $log_text widget option -yscrollcommand
#
# ARGS:
#    <NONE>
#
sub log_text_yscrollcommand {}

# pass_value_invalidcommand --
#
# Callback to handle $pass_value widget option -invalidcommand
#
# ARGS:
#    <NONE>
#
sub pass_value_invalidcommand {}

# pass_value_validatecommand --
#
# Callback to handle $pass_value widget option -validatecommand
#
# ARGS:
#    <NONE>
#
sub pass_value_validatecommand {}

# pass_value_xscrollcommand --
#
# Callback to handle $pass_value widget option -xscrollcommand
#
# ARGS:
#    <NONE>
#
sub pass_value_xscrollcommand {}

# upload_btn_command --
#
# Callback to handle $upload_btn widget option -command
#
# ARGS:
#    <NONE>
#
sub upload_btn_command {
	
	my $BYTES_PER_HASH = 1024;
	my $file = $ftp_gui_build::file_value->get;
	if($ftp->put($file)){
		$log_txt = $log_txt . "Uploading '$file' to the server...\n";
		$ftp_gui_build::log_text->Contents($log_txt);
		my $ssh = "/usr/bin/ssh";
		my $test = "/usr/bin/test";
		system $ssh, $host, $test, "-e -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no", $file;
		my $rc = $? >> 8;
		while(!$rc){
			system $ssh, $host, $test, "-e", $file;
			$rc = $? >> 8;
		}
		$log_txt = $log_txt . "'$file' uploaded to the server...\n";
		$ftp_gui_build::log_text->Contents($log_txt);
		my @files = $ftp->ls;
		my $list = "";
		foreach my $name (@files){
			$list = $list . $name . "\n";
		} 
		$ftp_gui_build::files_list_text->Contents($list);
	}
	else{
		$log_txt = $log_txt . "Cannot upload '$file' to the server...\n";
		$ftp_gui_build::log_text->Contents($log_txt);
		die $ftp->message;
	}
}

# user_value_invalidcommand --
#
# Callback to handle $user_value widget option -invalidcommand
#
# ARGS:
#    <NONE>
#
sub user_value_invalidcommand {}

# user_value_validatecommand --
#
# Callback to handle $user_value widget option -validatecommand
#
# ARGS:
#    <NONE>
#
sub user_value_validatecommand {}

# user_value_xscrollcommand --
#
# Callback to handle $user_value widget option -xscrollcommand
#
# ARGS:
#    <NONE>
#
sub user_value_xscrollcommand {}

# _text_2_xscrollcommand --
#
# Legacy command found in callback code. Add user comments inside body.
#
# ARGS:
#    <NONE>
#
sub _text_2_xscrollcommand {}

# _text_2_yscrollcommand --
#
# Legacy command found in callback code. Add user comments inside body.
#
# ARGS:
#    <NONE>
#
sub _text_2_yscrollcommand {}

# END CALLBACK CODE

# Standalone Code Initialization - DO NOT EDIT
#
ftp_gui_build::userinit() if defined &ftp_gui_build::userinit;

our $top = MainWindow->new();
$top->title("FTP Client");
ftp_gui_build::ui($top);

ftp_gui_build::run() if defined &ftp_gui_build::run;

Tk::MainLoop();

1;
